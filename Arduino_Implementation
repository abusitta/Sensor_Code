#include <SoftwareSerial.h>
#include <Wire.h> // I2C library, required for MLX90614
#include <SparkFunMLX90614.h> // Temp Sensor : SparkFunMLX90614 Arduino library
#include <EmonLib.h>    //current sensor

SoftwareSerial serialComm(0, 1); // RX, TX
EnergyMonitor emon1; 

IRTherm therm; // Create an IRTherm object to interact with throughout

//value of port used by sensor
const int sensor0 = 0;  //current sensor
const int sensor1 = 1;
const int sensor2 = 2;
const int sensor3 = 3;


//raw data buffers
int rawBuffer0[10];
int rawBuffer1[10];
int rawBuffer2[10];
int rawBuffer3[10];

//real valued buffers
float realDataBuffer0[10];
float realDataBuffer1[10];
float realDataBuffer2[10];
float realDataBuffer3[10];

float avgVal0;
float avgVal1;
float avgVal2;
float avgVal3;

String timeStamp;

void setup() {
  
  avgVal0 = 0;
  avgVal1 = 0;
  avgVal2 = 0;
  avgVal3 = 0;
  
  therm.begin(); // Initialize thermal IR sensor
  therm.setUnit(TEMP_C); // Set the library's units to Celcius with TEMP_C

  emon1.current(1, 111.1);             // Current: input pin, calibration.
  Serial.begin(9600);
    while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

}

void loop() {

//Collect raw data readings 
 for (int i=0 ; i<10 ; i++){
 
//  rawBuffer0[i] = analogRead(emon1.calcIrms(1480);  // Calculate Irms only);

  // Call therm.read() to read object and ambient temperatures from the sensor.
    therm.read();
//  rawBuffer2[i] = analogRead(sensor2);
 // rawBuffer3[i] = analogRead(sensor3);
 
//Convert raw data into real data.
//Default conversion gives real voltage readng. Conversion must be changed for individual sensor type.
//  realDataBuffer0[i] = rawBuffer0[i] * (5.0 / 1023.0);  // Convert the analog reading (which goes from 0 - 1023) to a voltage (0 - 5V);
//  realData1Buffer[i] = therm.object();
//  realData2Buffer[i] = rawBuffer2[i] * (5.0 / 1023.0);  // Convert the analog reading (which goes from 0 - 1023) to a voltage (0 - 5V);
//  realData3Buffer[i] = rawBuffer3[i] * (5.0 / 1023.0);  // Convert the analog reading (which goes from 0 - 1023) to a voltage (0 - 5V);

}



//Get average values from buffers
for (int j=0 ; j<10 ; j++){
  avgVal0 = avgVal0 + realDataBuffer0[j];
}

for (int j=0 ; j<10 ; j++){
  avgVal1 = avgVal1 + realDataBuffer1[j];
}

for (int j=0 ; j<10 ; j++){
  avgVal2 = avgVal2 + realDataBuffer2[j];
}

for (int j=0 ; j<10 ; j++){
  avgVal3 = avgVal3 + realDataBuffer3[j];
}


//Print data to serial monitor for testing purposes
/*
Serial.print(realData0);
    serialComm.print("V, ");
    Serial.println("");
    delay(100);

Serial.print(realData2);
    Serial.print("V, ");
    Serial.println("");
    Serial.println("");
    delay(100);

Serial.print(realData2);
    Serial.print("V, ");
    Serial.println("");
    Serial.println("");
    delay(100);
    
Serial.print(realData2);
    Serial.print("V, ");
    Serial.println("");
    Serial.println("");
    delay(100);
*/


   
//transmit data to RasPi
/*
  serialComm.print(avgVal0);
  serialComm.write(avgVal1);
  serialComm.write(avgVal2);
  serialComm.write(avgVal3);
  
  timeStamp = getTimeStamp();
  serialComm.print(timeStamp);
  */
}
