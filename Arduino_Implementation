#include <SoftwareSerial.h>
#include <Adafruit_MLX90614.h> //temp sensor
#include <EmonLib.h>    //current sensor

SoftwareSerial serialComm(0, 1); // RX, TX
EnergyMonitor emon1; 


//value of port used by sensor
const int sensor0 = 0; 
const int sensor1 = 1;
const int sensor2 = 2;
const int sensor3 = 3;


//raw data buffers
int rawBuffer0;
int rawBuffer1;
int rawBuffer2;
int rawBuffer3;

//real valued buffers
float realData0;
float realData1;
float realData2;
float realData3;

String timeStamp;

void setup() {

  emon1.current(1, 111.1);             // Current: input pin, calibration.
  Serial.begin(9600);
    while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

}

void loop() {

//Collect raw data readings 
 
//  rawBuffer0 = analogRead(sensor0);
//  rawBuffer1 = analogRead(sensor1);
//  rawBuffer2 = analogRead(sensor2);
 // rawBuffer3 = analogRead(sensor3);



//Convert raw data into real data.
//Default conversion gives real voltage readng. Conversion must be changed for individual sensor type.

//  realData0 = rawBuffer0 * (5.0 / 1023.0);  // Convert the analog reading (which goes from 0 - 1023) to a voltage (0 - 5V);
//  realData1 = rawBuffer1 * (5.0 / 1023.0);  // Convert the analog reading (which goes from 0 - 1023) to a voltage (0 - 5V);
//  realData2 = rawBuffer2 * (5.0 / 1023.0);  // Convert the analog reading (which goes from 0 - 1023) to a voltage (0 - 5V);
//  realData3 = rawBuffer3 * (5.0 / 1023.0);  // Convert the analog reading (which goes from 0 - 1023) to a voltage (0 - 5V);


//Print data to serial monitor for testing purposes
/*
Serial.print(realData0);
    serialComm.print("V, ");
    Serial.println("");
    delay(100);

Serial.print(realData2);
    Serial.print("V, ");
    Serial.println("");
    Serial.println("");
    delay(100);

Serial.print(realData2);
    Serial.print("V, ");
    Serial.println("");
    Serial.println("");
    delay(100);
    
Serial.print(realData2);
    Serial.print("V, ");
    Serial.println("");
    Serial.println("");
    delay(100);
*/


   
//transmit data to RasPi
/*
  serialComm.print(realData0);
  serialComm.write(realData1);
  serialComm.write(realData2);
  serialComm.write(realData3);
  
  timeStamp = getTimeStamp();
  serialComm.print(timeStamp);
  */
}



//get time value from RasPi
/*
void getTimeStamp(){
  
  return time0;
}*/



